services:
  # Zookeeper (Kafka 의존성)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - crypto-network

  # Kafka 브로커
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - crypto-network

  # InfluxDB v2
  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=adminpassword
      - DOCKER_INFLUXDB_INIT_ORG=crypto-tracker
      - DOCKER_INFLUXDB_INIT_BUCKET=crypto-metrics
      # 미리 정의된 토큰 사용 (실제 환경에서는 보안상 변경 필요)
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=my-super-secret-crypto-tracker-token-12345
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 암호화폐 데이터 수집기 (Producers)
  producers:
    build:
      context: .
      dockerfile: docker/Dockerfile.producers
    container_name: crypto-producers
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    volumes:
      - ./configs:/app/configs:ro
      - ./logs:/app/logs
    networks:
      - crypto-network
    restart: unless-stopped

  # 스트림 처리기 (Processor)
  processor:
    build:
      context: .
      dockerfile: docker/Dockerfile.processor
    container_name: crypto-processor
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    volumes:
      - ./jars:/app/jars:ro
      - ./logs:/app/logs
    networks:
      - crypto-network
    restart: unless-stopped

  # Telegraf (메트릭 수집 및 InfluxDB 전송)  
  telegraf:
    image: telegraf:1.28
    container_name: telegraf
    depends_on:
      influxdb:
        condition: service_healthy
      kafka:
        condition: service_started
    volumes:
      - ./configs/telegraf/telegraf-docker.conf:/etc/telegraf/telegraf.conf:ro
    networks:
      - crypto-network
    restart: unless-stopped

  # Grafana (시각화 대시보드)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    depends_on:
      influxdb:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - INFLUXDB_CRYPTO_TOKEN=my-super-secret-crypto-tracker-token-12345
      - INFLUXDB_SYSTEM_TOKEN=my-super-secret-crypto-tracker-token-12345
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - crypto-network
    restart: unless-stopped

volumes:
  kafka-data:
  influxdb-data:
  influxdb-config:
  grafana-data:

networks:
  crypto-network:
    driver: bridge